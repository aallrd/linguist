#!/usr/bin/env ruby

$LOAD_PATH[0, 0] = File.join(File.dirname(__FILE__), '..', 'lib')

require 'linguist'
require 'rugged'
require 'json'
require 'optparse'

# special case if not given a directory
# but still given the an option
if ['--breakdown', '--json', '--max-tree-size'].include? ARGV[0]
  path = Dir.pwd
else
  path = ARGV[0] || Dir.pwd
end

# The default supported maximum tree size
MAX_TREE_SIZE = 100_000

while opt = ARGV.shift do
  puts case opt
    when "--breakdown"
      breakdown = true
    when "--json"
      json_breakdown = true
    when "--max-tree-size"
      begin
        max_tree_size = Integer(ARGV.shift)
        puts "Max tree size value overridden: #{max_tree_size}"
      rescue TypeError
        puts "The --max-tree-size parameter expects an Integer value."
        abort
      end
  end
end

max_tree_size = MAX_TREE_SIZE if max_tree_size.nil?

if File.directory?(path)
  rugged = Rugged::Repository.new(path)
  repo = Linguist::Repository.new(rugged, rugged.head.target_id)

  if !json_breakdown
    repo.languages.sort_by { |_, size| size }.reverse.each do |language, size|
      percentage = ((size / repo.size.to_f) * 100)
      percentage = sprintf '%.2f' % percentage
      puts "%-7s %s" % ["#{percentage}%", language]
    end
  end
  if breakdown
    puts
    file_breakdown = repo.breakdown_by_file
    file_breakdown.each do |lang, files|
      puts "#{lang}:"
      files.each do |file|
        puts file
      end
      puts
    end
  elsif json_breakdown
    puts JSON.dump(repo.breakdown_by_file)
  end
elsif File.file?(path)
  blob = Linguist::FileBlob.new(path, Dir.pwd)

  type = if blob.text?
    'Text'
  elsif blob.image?
    'Image'
  else
    'Binary'
  end

  if json_breakdown
    puts JSON.generate( { blob.name =>  {
                                          :lines => blob.loc,
                                          :sloc => blob.sloc,
                                          :type => type,
                                          :mime_type => blob.mime_type,
                                          :language => blob.language
                                        }
                        } )
  else
    puts "#{blob.name}: #{blob.loc} lines (#{blob.sloc} sloc)"
    puts "  type:      #{type}"
    puts "  mime type: #{blob.mime_type}"
    puts "  language:  #{blob.language}"
  end

  if blob.large?
    puts "  blob is too large to be shown"
  end

  if blob.generated?
    puts "  appears to be generated source code"
  end

  if blob.vendored?
    puts "  appears to be a vendored file"
  end
else
  abort <<-HELP
  Linguist v#{Linguist::VERSION}
  Detect language type for a file, or, given a repository, determine language breakdown.
  Default max tree size: #{MAX_TREE_SIZE} files

  Usage: linguist <path>
         linguist <path> [--breakdown] [--json]
         linguist [--breakdown] [--json] [--max-tree-size {VALUE}]
  HELP
end
